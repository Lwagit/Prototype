@{
    ViewData["Title"] = "LECTURE's Claim Review Page";
}
<h1>@ViewData["Title"]</h1>
<style>
    body {
        background-color: #004d00; /* Dark green background color */
        color: white; /* Text color changed to white for better contrast */
    }

    table {
        color: white; /* Set font color to white for the entire table */
    }

    thead th {
        background-color: #005500; /* Dark green background for table header */
        color: white; /* White text color for table header */
    }

    tbody td {
        background-color: #003300; /* Even darker green for table rows */
    }

    tbody td, tbody th {
        color: white; /* White text color for table rows and cells */
    }
</style>

<!-- Table to display claims -->
<table class="table">
    <thead>
        <tr>
            <th>Hours:</th>
            <th>Programme:</th>
            <th>Module Code:</th>
            <th>Groups:</th>
            <th>Hourly Rate:</th>
            <th>Total Amount:</th>
            <th>File Uploaded:</th>
            <th>Action:</th>
            <th>Status:</th>
        </tr>
    </thead>
    <tbody id="claimsTableBody">
        <!-- JavaScript will dynamically populate this table -->
    </tbody>
</table>

<!-- JavaScript Section -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        loadClaims(); // Load and display claims when the page loads
    });

    function loadClaims() {
        // Retrieve claims from localStorage (or initialize as an empty array)
        let claims = JSON.parse(localStorage.getItem('claims')) || [];
        let claimsTableBody = document.getElementById('claimsTableBody');

        // Clear any existing rows
        claimsTableBody.innerHTML = '';

        // Populate the table with claims
        claims.forEach((claim, index) => {
            let newRow = document.createElement('tr');
            newRow.innerHTML = `
                            <td>${claim.hours}</td>
                            <td>${claim.programme}</td>
                            <td>${claim.moduleCode}</td>
                            <td>${claim.groups}</td>
                            <td>${claim.hourlyRate}</td>
                            <td>${claim.totalAmount}</td>
                                <td>${claim.FileUploaded}</td>
                            <td>
                                <a href="#" class="edit-link" data-index="${index}">Edit</a>
                                <a href="#" class="delete-link" data-index="${index}">Delete</a>
                            </td>
                            <td>${claim.status || 'Pending'}</td> <!-- Display status or default to "Pending" -->
                        `;

            // Add event listeners for Edit and Delete buttons
            newRow.querySelector('.edit-link').addEventListener('click', function (event) {
                event.preventDefault();
                editRow(index);
            });

            newRow.querySelector('.delete-link').addEventListener('click', function (event) {
                event.preventDefault();
                deleteRow(index);
            });

            // Append the new row to the table body
            claimsTableBody.appendChild(newRow);
        });
    }

    //edit button function
    function editRow(index) {
        // Retrieve existing claims from localStorage
        let claims = JSON.parse(localStorage.getItem('claims')) || [];

        // Get the claim data for the selected index
        const claim = claims[index];

        // Store the claim data in localStorage for editing
        localStorage.setItem('editClaim', JSON.stringify(claim));

        // Remove the claim from localStorage
        claims.splice(index, 1); // Remove the existing claim
        localStorage.setItem('claims', JSON.stringify(claims)); // Update localStorage

        // Redirect to the Claims page where the user can edit the claim
        window.location.href = '/Home/Claims'; // Adjust this URL to match your Claims.cshtml route
    }

    //delete button function
    function deleteRow(index) {
        // Retrieve existing claims from localStorage
        let claims = JSON.parse(localStorage.getItem('claims')) || [];

        // Remove the claim from the array
        claims.splice(index, 1);

        // Save the updated claims array back to localStorage
        localStorage.setItem('claims', JSON.stringify(claims));

        // Reload the claims table to reflect changes
        loadClaims();
    }
</script>
