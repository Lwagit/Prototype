@{
    ViewData["Title"] = "PC & MANAGER Authorization";
}
<h1>@ViewData["Title"]</h1>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Claim Status</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            background-color: #004d00; /* Dark green background color */
            color: white; /* Text color changed to white for better contrast */
        }

        .form-control, .btn {
            background-color: #e6e6e6; /* Light background color for form controls */
            color: #000; /* Black text color for form controls */
        }

        .btn-primary {
            background-color: #007700; /* Darker green for submit button */
            border-color: #007700;
        }

            .btn-primary:hover {
                background-color: #005500; /* Even darker green on hover */
                border-color: #005500;
            }

        footer {
            position: center;
            height: 0%;
            bottom: 0;
            width: 100%;
            background-color: #004d00;
            text-align: center;
            padding: 10px;
            border-top: 1px solid #e9ecef;
            color: #004d00; /* Dark green text color in the footer */
        }

        /* CSS for table and table content */
        table {
            color: white; /* Set font color to white for the entire table */
        }

        thead th {
            background-color: #005500; /* Dark green background for table header */
            color: white; /* White text color for table header */
        }

        tbody td {
            background-color: #003300; /* Even darker green for table rows */
        }

        tbody td, tbody th {
            color: white; /* White text color for table rows and cells */
        }

        .btn-success, .btn-danger {
            color: #000; /* Dark text color for buttons by default */
            border: none; /* Remove default border */
        }

        .btn-success {
            background-color: #28a745; /* Default green background for APPROVE button */
        }

        .btn-danger {
            background-color: #dc3545; /* Default red background for REJECT button */
        }

            .btn-success:hover, .btn-danger:hover {
                color: white; /* White text color on hover */
            }

        .btn-success:hover {
            background-color: #218838; /* Darker green for APPROVE button on hover */
        }

        .btn-danger:hover {
            background-color: #c82333; /* Darker red for REJECT button on hover */
        }
    </style>
</head>
<body>

    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>Number of hours:</th>
                    <th>Programme:</th>
                    <th>Module Code:</th>
                    <th>Groups:</th>
                    <th>Hourly Rate:</th>
                    <th>TOTAL AMOUNT:</th>
                    <th>File Uploaded:</th>
                    <th>Claim Status:</th>
                </tr>
            </thead>
            <tbody id="claimsTableBody">
                <!-- Populated rows will appear here -->
            </tbody>
        </table>
    </div>

    <footer>
        <p>Footer Content</p>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            loadClaims(); // Load and display claims when the page loads

            // Handle claim form submission
            document.getElementById('claimForm').addEventListener('submit', function (event) {
                event.preventDefault(); // Prevent default form submission

                // Get form inputs
                const hours = document.getElementById('hours').value;
                const programme = document.getElementById('programme').value;
                const moduleCode = document.getElementById('moduleCode').value;
                const groups = document.getElementById('groups').value;
                const hourlyRate = document.getElementById('hourlyRate').value;

                // Capture the uploaded file
                const fileInput = document.getElementById('claimFile');
                let fileName = 'No file uploaded'; // Default value

                if (fileInput.files && fileInput.files.length > 0) {
                    fileName = fileInput.files[0].name; // Get the actual file name
                }

                // Create a new claim object
                const newClaim = {
                    hours: hours,
                    programme: programme,
                    moduleCode: moduleCode,
                    groups: groups,
                    hourlyRate: hourlyRate,
                    totalAmount: hours * hourlyRate,
                    fileName: fileName, // Save file name
                    status: "Pending" // Default status is "Pending"
                };

                // Retrieve existing claims from localStorage
                let claims = JSON.parse(localStorage.getItem('claims')) || [];
                claims.push(newClaim); // Add new claim to the array

                // Save the updated claims back to localStorage
                localStorage.setItem('claims', JSON.stringify(claims));

                // Reset the form
                document.getElementById('claimForm').reset();

                // Reload the claims table to reflect changes
                loadClaims();
            });
        });

        // Function to load and display claims
        function loadClaims() {
            let claims = JSON.parse(localStorage.getItem('claims')) || [];
            let claimsTableBody = document.getElementById('claimsTableBody');

            // Clear existing table rows
            claimsTableBody.innerHTML = '';

            // Populate the table with claims
            claims.forEach((claim, index) => {
                let newRow = document.createElement('tr');
                newRow.innerHTML = `
                                    <td>${claim.hours}</td>
                                    <td>${claim.programme}</td>
                                    <td>${claim.moduleCode}</td>
                                    <td>${claim.groups}</td>
                                    <td>${claim.hourlyRate}</td>
                                    <td>${claim.totalAmount}</td>
                                    <td>${claim.fileName}</td>
                                    <td>
                                        <button class="btn btn-success" onclick="approveClaim(${index})">APPROVE</button>
                                        <button class="btn btn-danger" onclick="rejectClaim(${index})">REJECT</button>
                                    </td>
                                `;

                // Append the new row to the table body
                claimsTableBody.appendChild(newRow);
            });
        }

        //approve button
        function approveClaim(index) {
            // Retrieve existing claims from localStorage
            let claims = JSON.parse(localStorage.getItem('claims')) || [];

            // Update the status of the claim to "Approved"
            claims[index].status = 'Approved';

            // Save the updated claims back to localStorage
            localStorage.setItem('claims', JSON.stringify(claims));

            // Reload the claims table to reflect changes
            loadClaims();
        }

        //reject button
        function rejectClaim(index) {
            // Retrieve existing claims from localStorage
            let claims = JSON.parse(localStorage.getItem('claims')) || [];

            // Prompt for the reason for rejection
            const reason = prompt("Please provide a reason for rejecting this claim:");
            if (reason) {
                // Update the status of the claim to "Rejected"
                claims[index].status = 'Rejected';

                // Save the updated claims back to localStorage
                localStorage.setItem('claims', JSON.stringify(claims));

                // Reload the claims table to reflect changes
                loadClaims();
            }
        }
    </script>
</body>
</html>








